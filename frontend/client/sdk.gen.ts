// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { ReadRootGetData, GetCurrentDirFsGetCwdGetData, GetCurrentDirFsGetCwdGetResponse, ListDirFsListDirGetData, ListDirFsListDirGetResponse, ListDirFsListDirGetError, ChangeDirFsChangeDirNewdirPutData, ChangeDirFsChangeDirNewdirPutError, ChooseVcfChooseVcfVcfPathPutData, ChooseVcfChooseVcfVcfPathPutResponse, ChooseVcfChooseVcfVcfPathPutError, ChooseAnnotationFileChooseAnnotationFileAnnotationPathPutData, ChooseAnnotationFileChooseAnnotationFileAnnotationPathPutResponse, ChooseAnnotationFileChooseAnnotationFileAnnotationPathPutError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Read Root
 */
export const readRootGet = <ThrowOnError extends boolean = false>(options?: Options<ReadRootGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/',
        ...options
    });
};

/**
 * Get Current Dir
 */
export const getCurrentDirFsGetCwdGet = <ThrowOnError extends boolean = false>(options?: Options<GetCurrentDirFsGetCwdGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCurrentDirFsGetCwdGetResponse, unknown, ThrowOnError>({
        url: '/fs/get_cwd',
        ...options
    });
};

/**
 * List Dir
 */
export const listDirFsListDirGet = <ThrowOnError extends boolean = false>(options?: Options<ListDirFsListDirGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListDirFsListDirGetResponse, ListDirFsListDirGetError, ThrowOnError>({
        url: '/fs/list_dir',
        ...options
    });
};

/**
 * Change Dir
 */
export const changeDirFsChangeDirNewdirPut = <ThrowOnError extends boolean = false>(options: Options<ChangeDirFsChangeDirNewdirPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, ChangeDirFsChangeDirNewdirPutError, ThrowOnError>({
        url: '/fs/change_dir/{newdir}',
        ...options
    });
};

/**
 * Choose Vcf
 */
export const chooseVcfChooseVcfVcfPathPut = <ThrowOnError extends boolean = false>(options: Options<ChooseVcfChooseVcfVcfPathPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ChooseVcfChooseVcfVcfPathPutResponse, ChooseVcfChooseVcfVcfPathPutError, ThrowOnError>({
        url: '/choose_vcf/{vcf_path}',
        ...options
    });
};

/**
 * Choose Annotation File
 */
export const chooseAnnotationFileChooseAnnotationFileAnnotationPathPut = <ThrowOnError extends boolean = false>(options: Options<ChooseAnnotationFileChooseAnnotationFileAnnotationPathPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ChooseAnnotationFileChooseAnnotationFileAnnotationPathPutResponse, ChooseAnnotationFileChooseAnnotationFileAnnotationPathPutError, ThrowOnError>({
        url: '/choose_annotation_file/{annotation_path}',
        ...options
    });
};